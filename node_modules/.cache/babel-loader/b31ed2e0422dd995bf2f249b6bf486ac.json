{"ast":null,"code":"var _jsxFileName = \"/Users/farisaziz/Desktop/WODSHARE/WODSHARE_frontend/src/AthleteComponents.js/WODGenerator.js\";\nimport React, { Component } from 'react';\nimport { Grid, Dropdown, Button } from 'semantic-ui-react';\nimport './WODGenerator.css';\n\nclass WODGenerator extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      type: null,\n      category: null,\n      powerlifting: null,\n      done: false\n    };\n\n    this.handleTypeChange = (e, {\n      value\n    }) => {\n      this.setState({\n        type: value,\n        done: false\n      });\n    };\n\n    this.handleCategoryChange = (e, {\n      value\n    }) => {\n      this.setState({\n        category: value,\n        done: false\n      });\n    };\n\n    this.handlePowerliftingChange = (e, {\n      value\n    }) => {\n      this.setState({\n        powerlifting: value,\n        done: true\n      });\n    };\n\n    this.StrengthSetSelector = () => {\n      const setTypes = [[1, 1, 1, 1, 1, 1, 1], [5, 5, 3, 2, 1, 1, 1], []];\n    };\n\n    this.powerliftingSwitch = lift => {\n      let percentage = null;\n\n      switch (lift) {\n        case \"deadlift\":\n          percentage = 0.7;\n          break;\n\n        case \"back-squat\":\n          percentage = 0.7;\n          break;\n\n        case \"front-squat\":\n          percentage = 0.7;\n          break;\n\n        case \"bench-press\":\n          percentage = 0.7;\n          break;\n      }\n    };\n  }\n\n  render() {\n    const workOptions = [{\n      key: 'Strength',\n      text: 'Strength',\n      value: 'strength'\n    }, {\n      key: 'Hypertrophy',\n      text: 'Hypertrophy',\n      value: 'hypertrophy'\n    }, {\n      key: 'Metabolic Conditioning',\n      text: 'Metabolic Conditioning',\n      value: 'metabolic-conditioning'\n    }, {\n      key: 'Full Body',\n      text: 'Full Body',\n      value: 'full-body'\n    }];\n    const categoryOptions = [{\n      key: 'olympic Lifting',\n      text: 'Olympic-lifting',\n      value: 'olympic Lifting'\n    }, {\n      key: 'powerlifting',\n      text: 'Powerlifting',\n      value: 'powerlifting'\n    }, {\n      key: 'gymnastics',\n      text: 'Gymnastics',\n      value: 'gymnastics'\n    }];\n    const powerliftingOptions = [{\n      key: 'deadlift',\n      text: 'Deadlift',\n      value: 'deadlift'\n    }, {\n      key: 'back squat',\n      text: 'Back Squat',\n      value: 'back squat'\n    }, {\n      key: 'front-squat',\n      text: 'Front Squat',\n      value: 'front-squat'\n    }, {\n      key: 'bench-press',\n      text: 'Bench Press',\n      value: 'bench-press'\n    }];\n    return React.createElement(React.Fragment, null, \" \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }), React.createElement(\"h1\", {\n      className: \"h2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, \"WOD Generator\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }), React.createElement(Grid, {\n      columns: 2,\n      divided: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, React.createElement(Grid.Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, React.createElement(Grid.Column, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"animated zoomIn dropdown-txt\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, \"I want to work on \", ' ', React.createElement(Dropdown, {\n      inline: true,\n      options: workOptions,\n      defaultValue: \"\",\n      onChange: this.handleTypeChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    })), \" \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }), this.state.type === \"strength\" && React.createElement(\"span\", {\n      className: \"animated zoomIn dropdown-txt\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, \"Category: \", ' ', React.createElement(Dropdown, {\n      inline: true,\n      options: categoryOptions,\n      defaultValue: \"\",\n      onChange: this.handleCategoryChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }), this.state.category === \"powerlifting\" && React.createElement(\"span\", {\n      className: \"animated zoomIn dropdown-txt\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, \"Lift: \", ' ', React.createElement(Dropdown, {\n      inline: true,\n      options: powerliftingOptions,\n      defaultValue: \"\",\n      onChange: this.handlePowerliftingChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    })), \" \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }), this.state.done && React.createElement(Button, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }, \"Generate WOD\")), React.createElement(Grid.Column, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }, \"2\"))));\n  }\n\n}\n\nexport default WODGenerator;","map":{"version":3,"sources":["/Users/farisaziz/Desktop/WODSHARE/WODSHARE_frontend/src/AthleteComponents.js/WODGenerator.js"],"names":["React","Component","Grid","Dropdown","Button","WODGenerator","state","type","category","powerlifting","done","handleTypeChange","e","value","setState","handleCategoryChange","handlePowerliftingChange","StrengthSetSelector","setTypes","powerliftingSwitch","lift","percentage","render","workOptions","key","text","categoryOptions","powerliftingOptions"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Grid, Dropdown, Button } from 'semantic-ui-react'\nimport './WODGenerator.css'\n\nclass WODGenerator extends Component {\n    state = { \n        type: null, \n        category: null,\n        powerlifting: null, \n        done: false\n     }\n\n\n    handleTypeChange = (e, {value}) => {\n        this.setState({type: value, done: false})\n    }\n    handleCategoryChange = (e, {value}) => {\n        this.setState({category: value, done: false})\n    }\n    handlePowerliftingChange = (e, {value}) => {\n        this.setState({powerlifting: value, done: true})\n    }\n\n    StrengthSetSelector = () => {\n        const setTypes = [\n            [1, 1, 1, 1, 1, 1, 1],\n            [5, 5, 3, 2, 1, 1, 1], \n            []\n\n        ]\n    }\n\n\n    powerliftingSwitch = lift => {\n        let percentage = null\n        switch (lift) {\n            case \"deadlift\":\n                percentage = 0.7;\n            break;\n            case \"back-squat\":\n                percentage = 0.7;\n            break;\n            case \"front-squat\":\n                percentage = 0.7;\n            break;\n            case \"bench-press\":\n                percentage = 0.7;\n            break;\n        }\n    }\n    \n\n    render() {\n\n        const workOptions = [\n            {\n              key: 'Strength',\n              text: 'Strength',\n              value: 'strength'\n            },\n            {\n              key: 'Hypertrophy',\n              text: 'Hypertrophy',\n              value: 'hypertrophy',\n            },\n            {\n              key: 'Metabolic Conditioning',\n              text: 'Metabolic Conditioning',\n              value: 'metabolic-conditioning'\n            },\n            {\n              key: 'Full Body',\n              text: 'Full Body',\n              value: 'full-body'\n            },\n        ]\n\n        const categoryOptions = [\n            {\n              key: 'olympic Lifting',\n              text: 'Olympic-lifting',\n              value: 'olympic Lifting'\n            },\n            {\n              key: 'powerlifting',\n              text: 'Powerlifting',\n              value: 'powerlifting',\n            },\n            {\n              key: 'gymnastics',\n              text: 'Gymnastics',\n              value: 'gymnastics'\n            }\n        ]\n        const powerliftingOptions = [\n            {\n              key: 'deadlift',\n              text: 'Deadlift',\n              value: 'deadlift'\n            },\n            {\n              key: 'back squat',\n              text: 'Back Squat',\n              value: 'back squat',\n            },\n            {\n              key: 'front-squat',\n              text: 'Front Squat',\n              value: 'front-squat'\n            },\n            {\n              key: 'bench-press',\n              text: 'Bench Press',\n              value: 'bench-press'\n            }\n        ]\n\n        return (\n            <> <br/><br/><br/>\n            <h1 className='h2'>WOD Generator</h1><br/><br/>\n            <Grid columns={2} divided>\n                <Grid.Row>\n                <Grid.Column>\n                    <span className='animated zoomIn dropdown-txt'>\n                        I want to work on {' '}\n                        <Dropdown\n                        inline\n                        options={workOptions}\n                        defaultValue={\"\"}\n                        onChange={this.handleTypeChange}\n                        />\n                    </span> <br/><br/><br/>\n                    {this.state.type === \"strength\"&&\n                    <span className='animated zoomIn dropdown-txt'>\n                        Category: {' '}\n                        <Dropdown\n                        inline\n                        options={categoryOptions}\n                        defaultValue={\"\"}\n                        onChange={this.handleCategoryChange}\n                        />\n                    </span> \n                    }<br/><br/><br/>\n                    {this.state.category === \"powerlifting\"&&\n                    <span className='animated zoomIn dropdown-txt'>\n                        Lift: {' '}\n                        <Dropdown\n                        inline\n                        options={powerliftingOptions}\n                        defaultValue={\"\"}\n                        onChange={this.handlePowerliftingChange}\n                        />\n                    </span>\n                    } <br/><br/><br/>\n                    {this.state.done&&\n                    <Button>\n                        Generate WOD\n                    </Button>\n                    }\n                </Grid.Column>\n                <Grid.Column>\n                2\n                </Grid.Column>\n                </Grid.Row>\n            </Grid>\n            </>\n        );\n    }\n}\n\nexport default WODGenerator;"]},"metadata":{},"sourceType":"module"}