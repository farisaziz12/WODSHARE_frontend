{"ast":null,"code":"var _jsxFileName = \"/Users/farisaziz/Desktop/WODSHARE/WODSHARE_frontend/src/AthleteComponents.js/WODGenerator.js\";\nimport React, { Component } from 'react';\nimport { Grid, Dropdown, Button } from 'semantic-ui-react';\nimport './WODGenerator.css';\n\nclass WODGenerator extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      type: null,\n      category: null,\n      powerlifting: null,\n      done: false,\n      generated: false\n    };\n\n    this.handleTypeChange = (e, {\n      value\n    }) => {\n      this.setState({\n        type: value,\n        done: false\n      });\n    };\n\n    this.handleCategoryChange = (e, {\n      value\n    }) => {\n      this.setState({\n        category: value,\n        done: false\n      });\n    };\n\n    this.handlePowerliftingChange = (e, {\n      value\n    }) => {\n      this.setState({\n        powerlifting: value,\n        done: true\n      });\n    };\n\n    this.toggleWODgGeneration = () => {\n      this.setState({\n        generated: true\n      });\n    };\n\n    this.StrengthSetSelector = () => {\n      const setTypes = [{\n        set: [1, 1, 1, 1, 1, 1, 1],\n        percentages: [0.65, 0.75, 0.85, 0.90, 0.95, 0.98, 1.01],\n        rest: '90\"'\n      }, {\n        set: [5, 5, 3, 3, 1, 1, 1],\n        percentages: [0.60, 0.70, 0.80, 0.85, 0.90, 0.95, 1.01],\n        rest: '90\"'\n      }, {\n        set: [5, 5, 5, 5, 5],\n        percentages: [0.60, 0.70, 0.80, 0.80, 0.80],\n        rest: '90\"'\n      }, {\n        set: [10, 3, 3, 3, 10],\n        percentages: [0.54, 0.63, 0.72, 0.81, 0.54],\n        rest: '90\"'\n      }];\n      return setTypes[Math.floor(Math.random() * setTypes.length)];\n    };\n\n    this.powerliftingSwitch = lift => {\n      let benchmarkPercentage = null;\n\n      switch (lift) {\n        case \"deadlift\":\n          benchmarkPercentage = this.props.deadlift * 1;\n          break;\n\n        case \"back-squat\":\n          benchmarkPercentage = this.props.backsquat * 1;\n          break;\n\n        case \"front-squat\":\n          benchmarkPercentage = this.props.backsquat * 0.8;\n          break;\n\n        case \"bench-press\":\n          benchmarkPercentage = this.props.strict_press * 1.60;\n          break;\n      }\n\n      return benchmarkPercentage;\n    };\n  }\n\n  render() {\n    const workOptions = [{\n      key: 'Strength',\n      text: 'Strength',\n      value: 'strength'\n    }, {\n      key: 'Hypertrophy',\n      text: 'Hypertrophy',\n      value: 'hypertrophy'\n    }, {\n      key: 'Metabolic Conditioning',\n      text: 'Metabolic Conditioning',\n      value: 'metabolic-conditioning'\n    }, {\n      key: 'Full Body',\n      text: 'Full Body',\n      value: 'full-body'\n    }];\n    const categoryOptions = [{\n      key: 'olympic Lifting',\n      text: 'Olympic-lifting',\n      value: 'olympic Lifting'\n    }, {\n      key: 'powerlifting',\n      text: 'Powerlifting',\n      value: 'powerlifting'\n    }, {\n      key: 'gymnastics',\n      text: 'Gymnastics',\n      value: 'gymnastics'\n    }];\n    const powerliftingOptions = [{\n      key: 'deadlift',\n      text: 'Deadlift',\n      value: 'deadlift'\n    }, {\n      key: 'back squat',\n      text: 'Back Squat',\n      value: 'back squat'\n    }, {\n      key: 'front-squat',\n      text: 'Front Squat',\n      value: 'front-squat'\n    }, {\n      key: 'bench-press',\n      text: 'Bench Press',\n      value: 'bench-press'\n    }];\n\n    String.prototype.capitalize = function () {\n      return this.replace(/(?:^|\\s)\\S/g, function (a) {\n        return a.toUpperCase();\n      });\n    };\n\n    const powerliftingMovement = this.state.powerlifting ? this.state.powerlifting.capitalize() : undefined;\n    const PowerliftingWeight = this.state.powerlifting ? this.powerliftingSwitch(this.state.powerlifting) : undefined;\n    const SelectedSetProgram = this.state.powerlifting ? this.StrengthSetSelector : undefined;\n    return React.createElement(React.Fragment, null, \" \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }), React.createElement(\"h1\", {\n      className: \"h2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, \"WOD Generator\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }), React.createElement(Grid, {\n      columns: 2,\n      divided: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }, React.createElement(Grid.Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }, React.createElement(Grid.Column, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"animated zoomIn dropdown-txt\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, \"I want to work on \", ' ', React.createElement(Dropdown, {\n      inline: true,\n      options: workOptions,\n      defaultValue: \"\",\n      onChange: this.handleTypeChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    })), \" \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }), this.state.type === \"strength\" && React.createElement(\"span\", {\n      className: \"animated zoomIn dropdown-txt\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, \"Category: \", ' ', React.createElement(Dropdown, {\n      inline: true,\n      options: categoryOptions,\n      defaultValue: \"\",\n      onChange: this.handleCategoryChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }), this.state.category === \"powerlifting\" && React.createElement(\"span\", {\n      className: \"animated zoomIn dropdown-txt\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }, \"Lift: \", ' ', React.createElement(Dropdown, {\n      inline: true,\n      options: powerliftingOptions,\n      defaultValue: \"\",\n      onChange: this.handlePowerliftingChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    })), \" \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }), this.state.done && React.createElement(Button, {\n      onClick: this.toggleWODgGeneration,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }, \"Generate WOD\")), React.createElement(Grid.Column, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }, this.state.generated && React.createElement(React.Fragment, null, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }, \" Generated WOD\"), React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    }, powerliftingMovement, \" \", this.state.type.capitalize(), \" WOD\"), console.log(PowerliftingWeight), console.log(SelectedSetProgram))))));\n  }\n\n}\n\nexport default WODGenerator;","map":{"version":3,"sources":["/Users/farisaziz/Desktop/WODSHARE/WODSHARE_frontend/src/AthleteComponents.js/WODGenerator.js"],"names":["React","Component","Grid","Dropdown","Button","WODGenerator","state","type","category","powerlifting","done","generated","handleTypeChange","e","value","setState","handleCategoryChange","handlePowerliftingChange","toggleWODgGeneration","StrengthSetSelector","setTypes","set","percentages","rest","Math","floor","random","length","powerliftingSwitch","lift","benchmarkPercentage","props","deadlift","backsquat","strict_press","render","workOptions","key","text","categoryOptions","powerliftingOptions","String","prototype","capitalize","replace","a","toUpperCase","powerliftingMovement","undefined","PowerliftingWeight","SelectedSetProgram","console","log"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Grid, Dropdown, Button } from 'semantic-ui-react'\nimport './WODGenerator.css'\n\nclass WODGenerator extends Component {\n    state = { \n        type: null, \n        category: null,\n        powerlifting: null, \n        done: false, \n        generated: false\n     }\n\n\n    handleTypeChange = (e, {value}) => {\n        this.setState({type: value, done: false})\n    }\n    handleCategoryChange = (e, {value}) => {\n        this.setState({category: value, done: false})\n    }\n    handlePowerliftingChange = (e, {value}) => {\n        this.setState({powerlifting: value, done: true})\n    }\n    toggleWODgGeneration = () => {\n        this.setState({generated: true})\n    }\n\n    StrengthSetSelector = () => {\n        const setTypes = [\n           {\n               set: [1, 1, 1, 1, 1, 1, 1], \n               percentages: [0.65, 0.75, 0.85, 0.90, 0.95, 0.98, 1.01], \n               rest: '90\"' \n           }, \n           {\n            set: [5, 5, 3, 3, 1, 1, 1], \n            percentages: [0.60, 0.70, 0.80, 0.85, 0.90, 0.95, 1.01], \n            rest: '90\"'\n           }, \n           {\n            set: [5, 5, 5, 5, 5], \n            percentages: [0.60, 0.70, 0.80, 0.80, 0.80], \n            rest: '90\"'\n           }, \n           {\n            set: [10, 3, 3, 3, 10], \n            percentages: [0.54, 0.63, 0.72, 0.81, 0.54], \n            rest: '90\"'\n           }\n        ]\n\n        return setTypes[Math.floor(Math.random() * setTypes.length)]\n    }\n\n    powerliftingSwitch = lift => {\n        let benchmarkPercentage = null\n        switch (lift) {\n            case \"deadlift\":\n                benchmarkPercentage = this.props.deadlift * 1;\n            break;\n            case \"back-squat\":\n                benchmarkPercentage = this.props.backsquat * 1;\n            break;\n            case \"front-squat\":\n                benchmarkPercentage = this.props.backsquat * 0.8;\n            break;\n            case \"bench-press\":\n                benchmarkPercentage = this.props.strict_press * 1.60;\n            break;\n        }\n        return benchmarkPercentage\n    }\n    \n\n    render() {\n\n        const workOptions = [\n            {\n              key: 'Strength',\n              text: 'Strength',\n              value: 'strength'\n            },\n            {\n              key: 'Hypertrophy',\n              text: 'Hypertrophy',\n              value: 'hypertrophy',\n            },\n            {\n              key: 'Metabolic Conditioning',\n              text: 'Metabolic Conditioning',\n              value: 'metabolic-conditioning'\n            },\n            {\n              key: 'Full Body',\n              text: 'Full Body',\n              value: 'full-body'\n            },\n        ]\n\n        const categoryOptions = [\n            {\n              key: 'olympic Lifting',\n              text: 'Olympic-lifting',\n              value: 'olympic Lifting'\n            },\n            {\n              key: 'powerlifting',\n              text: 'Powerlifting',\n              value: 'powerlifting',\n            },\n            {\n              key: 'gymnastics',\n              text: 'Gymnastics',\n              value: 'gymnastics'\n            }\n        ]\n        const powerliftingOptions = [\n            {\n              key: 'deadlift',\n              text: 'Deadlift',\n              value: 'deadlift'\n            },\n            {\n              key: 'back squat',\n              text: 'Back Squat',\n              value: 'back squat',\n            },\n            {\n              key: 'front-squat',\n              text: 'Front Squat',\n              value: 'front-squat'\n            },\n            {\n              key: 'bench-press',\n              text: 'Bench Press',\n              value: 'bench-press'\n            }\n        ]\n\n        String.prototype.capitalize = function() {\n            return this.replace(/(?:^|\\s)\\S/g, function(a) { return a.toUpperCase(); });\n        }\n        const powerliftingMovement =  this.state.powerlifting? this.state.powerlifting.capitalize() : undefined\n        const PowerliftingWeight = this.state.powerlifting? this.powerliftingSwitch(this.state.powerlifting) : undefined\n        const SelectedSetProgram = this.state.powerlifting? this.StrengthSetSelector : undefined\n        return (\n            <> <br/><br/><br/>\n            <h1 className='h2'>WOD Generator</h1><br/><br/>\n            <Grid columns={2} divided>\n                <Grid.Row>\n                <Grid.Column>\n                    <span className='animated zoomIn dropdown-txt'>\n                        I want to work on {' '}\n                        <Dropdown\n                        inline\n                        options={workOptions}\n                        defaultValue={\"\"}\n                        onChange={this.handleTypeChange}\n                        />\n                    </span> <br/><br/><br/>\n                    {this.state.type === \"strength\"&&\n                    <span className='animated zoomIn dropdown-txt'>\n                        Category: {' '}\n                        <Dropdown\n                        inline\n                        options={categoryOptions}\n                        defaultValue={\"\"}\n                        onChange={this.handleCategoryChange}\n                        />\n                    </span> \n                    }<br/><br/><br/>\n                    {this.state.category === \"powerlifting\"&&\n                    <span className='animated zoomIn dropdown-txt'>\n                        Lift: {' '}\n                        <Dropdown\n                        inline\n                        options={powerliftingOptions}\n                        defaultValue={\"\"}\n                        onChange={this.handlePowerliftingChange}\n                        />\n                    </span>\n                    } <br/><br/><br/>\n                    {this.state.done&&\n                    <Button onClick={this.toggleWODgGeneration}>\n                        Generate WOD\n                    </Button>\n                    }\n                </Grid.Column>\n                <Grid.Column>\n                    {this.state.generated&&\n                        <>\n                        <h1> Generated WOD</h1>\n                        <h2>{powerliftingMovement} {this.state.type.capitalize()} WOD</h2>\n                        {console.log(PowerliftingWeight)}\n                        {console.log(SelectedSetProgram)}\n\n                        </>\n                    }\n                </Grid.Column>\n                </Grid.Row>\n            </Grid>\n            </>\n        );\n    }\n}\n\nexport default WODGenerator;"]},"metadata":{},"sourceType":"module"}