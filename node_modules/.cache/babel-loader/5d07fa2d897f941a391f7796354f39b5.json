{"ast":null,"code":"import React, { Component } from 'react';\nimport { Grid, Form, Message, Select, Button } from 'semantic-ui-react';\n\nclass EditWorkoutForm extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      success: false,\n      name: this.props.name,\n      wod_type: this.props.wod_type,\n      category: this.props.category,\n      date: this.props.date,\n      workout: this.props.workout,\n      athlete: this.props.athleteID,\n      done: false\n    };\n\n    this.handleChange = e => {\n      this.setState({\n        [e.target.name]: e.target.value\n      });\n    };\n\n    this.handleTypeChange = (e, {\n      value\n    }) => {\n      this.setState({\n        wod_type: value\n      });\n    };\n\n    this.handleCategoryChange = (e, {\n      value\n    }) => {\n      this.setState({\n        category: value\n      });\n    };\n\n    this.handleSubmit = () => {\n      const _this$state = this.state,\n            name = _this$state.name,\n            wod_type = _this$state.wod_type,\n            category = _this$state.category,\n            date = _this$state.date,\n            workout = _this$state.workout;\n      fetch(`https://wodshare.herokuapp.com/${this.props.id}`, {\n        method: \"PATCH\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Accept\": \"application/json\"\n        },\n        body: JSON.stringify({\n          workout: {\n            name: name,\n            wod_type: wod_type,\n            category: category,\n            date: date,\n            workout: workout,\n            coach_id: this.props.coachID\n          }\n        })\n      }).then(this.setState({\n        success: true,\n        done: true\n      }));\n    };\n  }\n\n  render() {\n    const categoryOptions = [{\n      key: 'g',\n      text: 'Gymnastics',\n      value: 'Gymnastics'\n    }, {\n      key: 'm',\n      text: 'Metabolic Conditioning',\n      value: 'Metabolic Conditioning'\n    }, {\n      key: 'w',\n      text: 'Weightlifting',\n      value: 'Weightlifting'\n    }, {\n      key: 'p',\n      text: 'Powerlifting',\n      value: 'Powerlifting'\n    }, {\n      key: 's',\n      text: 'Strength',\n      value: 'Strength'\n    }];\n    const typeOptions = [{\n      key: 'c',\n      text: 'Couplet',\n      value: 'Couplet'\n    }, {\n      key: 'ch',\n      text: 'Chipper',\n      value: 'Chipper'\n    }, {\n      key: 't',\n      text: 'Triplet',\n      value: 'Triplet'\n    }, {\n      key: 'h',\n      text: 'Hypertrophy',\n      value: 'Hypertrophy'\n    }, {\n      key: 'm',\n      text: 'Muscular Endurance',\n      value: 'Muscular Endurance'\n    }];\n    const _this$state2 = this.state,\n          name = _this$state2.name,\n          wod_type = _this$state2.wod_type,\n          category = _this$state2.category,\n          date = _this$state2.date,\n          workout = _this$state2.workout;\n    return React.createElement(React.Fragment, null);\n  }\n\n}\n\nexport default EditWorkoutForm; //     <Grid>\n//         <Grid.Row centered>\n//             <Grid.Column width={6}>\n//                 <Form size={\"small\"} onSubmit={this.handleSubmit} success>\n//                     <h1>Edit Workout</h1>\n//                     <Form.Field >\n//                         <label>Name</label>\n//                         <input placeholder=\"Fran\" type = \"text\" name = \"name\" value = {name} onChange = {this.handleChange}></input>\n//                     </Form.Field>\n//                     <Form.Select onChange={this.handleCategoryChange} required  name='category' fluid label='Category' placeholder='Gymnastics' options={categoryOptions} value={category} />\n//                     <Form.Select onChange={this.handleTypeChange} required name='type' fluid label='Type' placeholder='Couplet' options={typeOptions} value={wod_type} />\n//                     <Form.Field required>\n//                         <label>Date</label>\n//                         <input type = \"date\" name = \"date\" value = {date} onChange = {this.handleChange}></input>\n//                     </Form.Field>\n//                     <Form.TextArea required label='Workout' name = \"workout\" value = {workout} onChange = {this.handleChange}/>\n//                 {this.state.success?\n//                     <Message\n//                         success\n//                         header='Workout Edited'\n//                         content=\"Athlete can now see the updated workout\"\n//                     />\n//                     :\n//                     undefined\n//                 }\n//                     <Button onSubmit={this.handleSubmit} type='submit'>Edit Workout</Button> <br/><br/>\n//                     <Button onClick={this.props.cancelEdit}>{this.state.done? \"Done \": \"Cancel\"}</Button>\n//             </Form>\n//         </Grid.Column>\n//     </Grid.Row>\n// </Grid>","map":{"version":3,"sources":["/Users/farisaziz/Desktop/WODSHARE/WODSHARE_frontend/src/CoachComponents.js/EditWorkoutForm.js"],"names":["React","Component","Grid","Form","Message","Select","Button","EditWorkoutForm","state","success","name","props","wod_type","category","date","workout","athlete","athleteID","done","handleChange","e","setState","target","value","handleTypeChange","handleCategoryChange","handleSubmit","fetch","id","method","headers","body","JSON","stringify","coach_id","coachID","then","render","categoryOptions","key","text","typeOptions"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAAUC,IAAV,EAAgBC,IAAhB,EAAsBC,OAAtB,EAA+BC,MAA/B,EAAuCC,MAAvC,QAAoD,mBAApD;;AAEA,MAAMC,eAAN,SAA8BN,SAA9B,CAAwC;AAAA;AAAA;AAAA,SACpCO,KADoC,GAC5B;AACJC,MAAAA,OAAO,EAAE,KADL;AAEJC,MAAAA,IAAI,EAAE,KAAKC,KAAL,CAAWD,IAFb;AAGJE,MAAAA,QAAQ,EAAE,KAAKD,KAAL,CAAWC,QAHjB;AAIJC,MAAAA,QAAQ,EAAE,KAAKF,KAAL,CAAWE,QAJjB;AAKJC,MAAAA,IAAI,EAAE,KAAKH,KAAL,CAAWG,IALb;AAMJC,MAAAA,OAAO,EAAE,KAAKJ,KAAL,CAAWI,OANhB;AAOJC,MAAAA,OAAO,EAAE,KAAKL,KAAL,CAAWM,SAPhB;AAQJC,MAAAA,IAAI,EAAE;AARF,KAD4B;;AAAA,SAanCC,YAbmC,GAapBC,CAAC,IAAI;AACjB,WAAKC,QAAL,CAAc;AACX,SAACD,CAAC,CAACE,MAAF,CAASZ,IAAV,GAAiBU,CAAC,CAACE,MAAF,CAASC;AADf,OAAd;AAGF,KAjBkC;;AAAA,SAmBnCC,gBAnBmC,GAmBhB,CAACJ,CAAD,EAAI;AAACG,MAAAA;AAAD,KAAJ,KAAgB;AAC7B,WAAKF,QAAL,CAAc;AAACT,QAAAA,QAAQ,EAAEW;AAAX,OAAd;AAEN,KAtBmC;;AAAA,SAwBpCE,oBAxBoC,GAwBb,CAACL,CAAD,EAAI;AAACG,MAAAA;AAAD,KAAJ,KAAgB;AACnC,WAAKF,QAAL,CAAc;AAACR,QAAAA,QAAQ,EAAEU;AAAX,OAAd;AACH,KA1BmC;;AAAA,SA4BpCG,YA5BoC,GA4BrB,MAAM;AAAA,0BACmC,KAAKlB,KADxC;AAAA,YACTE,IADS,eACTA,IADS;AAAA,YACHE,QADG,eACHA,QADG;AAAA,YACOC,QADP,eACOA,QADP;AAAA,YACiBC,IADjB,eACiBA,IADjB;AAAA,YACuBC,OADvB,eACuBA,OADvB;AAEjBY,MAAAA,KAAK,CAAE,kCAAiC,KAAKhB,KAAL,CAAWiB,EAAG,EAAjD,EAAoD;AACrDC,QAAAA,MAAM,EAAE,OAD6C;AAErDC,QAAAA,OAAO,EAAE;AACL,0BAAgB,kBADX;AAEL,oBAAU;AAFL,SAF4C;AAMrDC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACjBlB,UAAAA,OAAO,EAAE;AACLL,YAAAA,IAAI,EAAEA,IADD;AAELE,YAAAA,QAAQ,EAAEA,QAFL;AAGLC,YAAAA,QAAQ,EAAEA,QAHL;AAILC,YAAAA,IAAI,EAAEA,IAJD;AAKLC,YAAAA,OAAO,EAAEA,OALJ;AAMLmB,YAAAA,QAAQ,EAAE,KAAKvB,KAAL,CAAWwB;AANhB;AADQ,SAAf;AAN+C,OAApD,CAAL,CAgBGC,IAhBH,CAgBQ,KAAKf,QAAL,CAAc;AAACZ,QAAAA,OAAO,EAAC,IAAT;AAAeS,QAAAA,IAAI,EAAE;AAArB,OAAd,CAhBR;AAkBH,KAhDmC;AAAA;;AAiDpCmB,EAAAA,MAAM,GAAG;AACL,UAAMC,eAAe,GAAG,CACpB;AAAEC,MAAAA,GAAG,EAAE,GAAP;AAAYC,MAAAA,IAAI,EAAE,YAAlB;AAAgCjB,MAAAA,KAAK,EAAE;AAAvC,KADoB,EAEpB;AAAEgB,MAAAA,GAAG,EAAE,GAAP;AAAYC,MAAAA,IAAI,EAAE,wBAAlB;AAA4CjB,MAAAA,KAAK,EAAE;AAAnD,KAFoB,EAGpB;AAAEgB,MAAAA,GAAG,EAAE,GAAP;AAAYC,MAAAA,IAAI,EAAE,eAAlB;AAAmCjB,MAAAA,KAAK,EAAE;AAA1C,KAHoB,EAIpB;AAACgB,MAAAA,GAAG,EAAE,GAAN;AAAWC,MAAAA,IAAI,EAAE,cAAjB;AAAiCjB,MAAAA,KAAK,EAAE;AAAxC,KAJoB,EAKpB;AAACgB,MAAAA,GAAG,EAAE,GAAN;AAAWC,MAAAA,IAAI,EAAE,UAAjB;AAA6BjB,MAAAA,KAAK,EAAE;AAApC,KALoB,CAAxB;AAOI,UAAMkB,WAAW,GAAG,CAChB;AAAEF,MAAAA,GAAG,EAAE,GAAP;AAAYC,MAAAA,IAAI,EAAE,SAAlB;AAA6BjB,MAAAA,KAAK,EAAE;AAApC,KADgB,EAEhB;AAAEgB,MAAAA,GAAG,EAAE,IAAP;AAAaC,MAAAA,IAAI,EAAE,SAAnB;AAA8BjB,MAAAA,KAAK,EAAE;AAArC,KAFgB,EAGhB;AAAEgB,MAAAA,GAAG,EAAE,GAAP;AAAYC,MAAAA,IAAI,EAAE,SAAlB;AAA6BjB,MAAAA,KAAK,EAAE;AAApC,KAHgB,EAIhB;AAACgB,MAAAA,GAAG,EAAE,GAAN;AAAWC,MAAAA,IAAI,EAAE,aAAjB;AAAgCjB,MAAAA,KAAK,EAAE;AAAvC,KAJgB,EAKhB;AAACgB,MAAAA,GAAG,EAAE,GAAN;AAAWC,MAAAA,IAAI,EAAE,oBAAjB;AAAuCjB,MAAAA,KAAK,EAAE;AAA9C,KALgB,CAApB;AARC,yBAcmD,KAAKf,KAdxD;AAAA,UAcOE,IAdP,gBAcOA,IAdP;AAAA,UAcaE,QAdb,gBAcaA,QAdb;AAAA,UAcuBC,QAdvB,gBAcuBA,QAdvB;AAAA,UAciCC,IAdjC,gBAciCA,IAdjC;AAAA,UAcuCC,OAdvC,gBAcuCA,OAdvC;AAeD,WACI,yCADJ;AAIH;;AApE+B;;AAuExC,eAAeR,eAAf,C,CACY;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { Component } from 'react';\nimport {  Grid, Form, Message, Select, Button} from 'semantic-ui-react'\n\nclass EditWorkoutForm extends Component {\n    state = { \n        success: false, \n        name: this.props.name, \n        wod_type: this.props.wod_type, \n        category: this.props.category, \n        date: this.props.date, \n        workout: this.props.workout,\n        athlete: this.props.athleteID,\n        done: false\n     }\n\n\n     handleChange = e => {\n        this.setState({\n           [e.target.name]: e.target.value\n        })\n     }\n\n     handleTypeChange = (e, {value}) => {\n           this.setState({wod_type: value})\n        \n    }\n\n    handleCategoryChange = (e, {value}) => {\n        this.setState({category: value})\n    }\n\n    handleSubmit = () => {\n        const { name, wod_type, category, date, workout } = this.state\n        fetch(`https://wodshare.herokuapp.com/${this.props.id}`, {\n            method: \"PATCH\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Accept\": \"application/json\"\n            },\n            body: JSON.stringify({\n                workout: {\n                    name: name, \n                    wod_type: wod_type, \n                    category: category,\n                    date: date,\n                    workout: workout, \n                    coach_id: this.props.coachID\n                }\n            })\n        }).then(this.setState({success:true, done: true}))\n\n    }\n    render() {\n        const categoryOptions = [\n            { key: 'g', text: 'Gymnastics', value: 'Gymnastics' },\n            { key: 'm', text: 'Metabolic Conditioning', value: 'Metabolic Conditioning' },\n            { key: 'w', text: 'Weightlifting', value: 'Weightlifting' },\n            {key: 'p', text: 'Powerlifting', value: 'Powerlifting' },\n            {key: 's', text: 'Strength', value: 'Strength' }]\n    \n            const typeOptions = [\n                { key: 'c', text: 'Couplet', value: 'Couplet' },\n                { key: 'ch', text: 'Chipper', value: 'Chipper' },\n                { key: 't', text: 'Triplet', value: 'Triplet' },\n                {key: 'h', text: 'Hypertrophy', value: 'Hypertrophy' },\n                {key: 'm', text: 'Muscular Endurance', value: 'Muscular Endurance' }]\n            const { name, wod_type, category, date, workout } = this.state\n            return (\n                <>\n                </>\n            );\n        }\n}\n\nexport default EditWorkoutForm;\n            //     <Grid>\n            //         <Grid.Row centered>\n            //             <Grid.Column width={6}>\n            //                 <Form size={\"small\"} onSubmit={this.handleSubmit} success>\n            //                     <h1>Edit Workout</h1>\n            //                     <Form.Field >\n            //                         <label>Name</label>\n            //                         <input placeholder=\"Fran\" type = \"text\" name = \"name\" value = {name} onChange = {this.handleChange}></input>\n            //                     </Form.Field>\n            //                     <Form.Select onChange={this.handleCategoryChange} required  name='category' fluid label='Category' placeholder='Gymnastics' options={categoryOptions} value={category} />\n                                \n            //                     <Form.Select onChange={this.handleTypeChange} required name='type' fluid label='Type' placeholder='Couplet' options={typeOptions} value={wod_type} />\n                                \n            //                     <Form.Field required>\n            //                         <label>Date</label>\n            //                         <input type = \"date\" name = \"date\" value = {date} onChange = {this.handleChange}></input>\n            //                     </Form.Field>\n            //                     <Form.TextArea required label='Workout' name = \"workout\" value = {workout} onChange = {this.handleChange}/>\n            //                 {this.state.success?\n            //                     <Message\n            //                         success\n            //                         header='Workout Edited'\n            //                         content=\"Athlete can now see the updated workout\"\n            //                     />\n            //                     :\n            //                     undefined\n            //                 }\n            //                     <Button onSubmit={this.handleSubmit} type='submit'>Edit Workout</Button> <br/><br/>\n            //                     <Button onClick={this.props.cancelEdit}>{this.state.done? \"Done \": \"Cancel\"}</Button>\n            //             </Form>\n            //         </Grid.Column>\n            //     </Grid.Row>\n            // </Grid>"]},"metadata":{},"sourceType":"module"}